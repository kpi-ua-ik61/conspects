Буферизация ввода и вывода, и для чего она надо
ПРименяеться с целью повышения функционирования эффективности
В ОП помещаяеться буфер для информации для вывода на внешн
Чем больше буффер, тем более ефективней работает процессор

Для экономии ОП, часто буффер организовывают на Винчестере
Такой режим работы назыв. -- спулингом

Если в буффере закончилась инфа, то тогда следующий блок инфы загружается



Понятие последовательно процесса
Выполнение любой программы - это последовательность некотороых инструкций
Последовательный процесс.
Выполнение каждого из действий аиты делает изменение     блин неуспел

Контекстом процесса назыв, инфу которую проц может чекнуть или изменить
Контекст процессов включает в себя
1 контекст процессора 
	Словосостояния - что сейчас в проце
	Регистры 
2 контекст памяти или рабочее пространство
	Сегменты процедур данных ИСТЕК выполнения 
		Прога в памяти бла бла бла, однородность памяти, контекст данных и их изменения
3 совокупность атрибутов процесса
	Имя процесса
	Приоритет процесса 
	Права процесса, которые определяет перечень разрешаемых операций
4 траса процесса
	Определяеться последовательностью состояния контекста (пут йор схема хир)



Одновременное выполнение процессов
Сначало был пакетный режим, а потом мультипрограммный, а теперь многопользовательский

В компе одновременно может быть выполненно несколько процессов 
контексты разных процессов могут иметь общие части
Два процесса назыв "Независимыми", если их контексты не пересекаються
А часть процесса которя не пренадлежит ни какому другому процу, назыв собственным контекстом

Паралельные работы?
Расмотрим проги P и Q и соответствующие процы p и q
Выполнение процессов может происходить разными путями

Первая схема такая:
Последовательное выполнение процессов, один за одним
	применяеться в пакетном режиме (Что-то про перфокарты)

Вторая схема
Поочерёдное выполнение процессов
	называеться псевдопаралельным 
		потомучто проц один, он неможет несколько процессов одновременно

Третяя схема
Выполнение процессов происходит одновременно
	Это возможно только при наличии хотябы двух процессоров (в народе ядра, но это коечто другое)


Конкуренция между процессорами, и понятия про ресурсы
(тут должна быть схема с презентации про ресурсы и т.д., но я ничего не увидел)
Пусть имееться совокупность процессов, каждый из которых в своем контексте содержит общий объект, который в определённый момент времени может использовать только один процесс
В этом случае говорят, что данный объект представляет для процессов критический ресурс
а процессы находяться в состоянии конкуренции за этот ресурс

Для реализации выполнения процессов, каждому крит ресурсу ставиться ответсвие, так называемый воображаемый Виртуальный Ресурс

Ведение Виртуальных Ресурсов позволяет перенести проблему взаимно исключения при огранизации доступа, к соответсвующим физическим ресурсам, на организацию механизма выделения ресурсов между этими конкурирующеми процессами



Синхронизация процессов 
Строиться на основе двух основополагающих огранчениях
1 На порядок пришедствования в логическом времени на некоторые точки трас-процессов
	Пример:
	Пусть проц P передает инфу процессу Q, процесс Q начинает работать только после того как процесс P занесёт всю эту информацию в определённую для этого область
2 Ограничение на условие разрешающее переход некоторых точек-трасс на определённые процессы
	Пример:
	Пусть данны несколько процессов (пофиг на их нумерацию), 
	определим для них точку встречи для всех процессов в одном месте
	Такое называеться Точкой Синхронизации
	В такой точке процессы ожидают до выполнение этих условий

	Пока не внесём все данные, с места не сдвинуться (в народе)

Процесс в состоянии ожидания, называют в состоянии ожидании или блокированым
а в противоположном состоянии выполнения, называют активным.
	Переход из активного состояния в состояние ожидания называют - блокировкой
а обратный - активизация

Механизм осуществляющий синхронизацию выполнения процессов называют - монитором
И блокировка и активизация процессов создаються в процедурах, с помощью условий.
	(ну а тут всё дальше просто)




Связь программ и данных (а тут говорят поинтереснее)
	Интерпретация, и Компиляция 
Интерпретация - пошаговое транслирование и выполнение программы
Компиляци - полностью транслирование, а потом объеденение в одну программу, и тогда уже можно выполнять

Режим Интерпритации удобен для отладки программ (дебагеры), шикарно пошагово ищет ошибки
Недостаток в том что, для этой интерпритации требуеться время

Компилятор - он компилирует в машинный код, языки высокого уровня
Транслятор - переводит с одного языка на другой

Вторая схема (инсерт йор схематикс хир)исп, при большом кол-ве программ и информации (расчёты баллистики для ракет и т.д.)

Исходные программы могут быть на разных языках и транслироваться на выполненние
И затем на фазе загрузки\редактирования связи из перемещаемых объектов программ 
формируеться так кое-что что я прослушал, наверно всё переводиться в машинный код, и тогда пофиг на каком высокоуровневом языке был написан код










